* Design
  - parts
    - resource definition
      - set/get attributes
      - set/get relations
      - print
    - resource validation
    - reading json
    - writing json
  - code
    - protocols
    - create-resource [name]
    - validate [resource]
    - json (read, write)

* Things to fix [0/5]
  - [ ] Change resource definition to have attributes that have maps
    instead of vector constraints. Makes lookup much easier.
    - order
    - path
    - db-name
    - type
    - const value (have it remove const values, or not include them in
      order at least)
  - [ ] Definition should be populated with relevant data (db-name for
    attributes, type, primary key etc...) when read.
  - [ ] check what can be done about [sg]et-attr**, macro maybe?
  - [ ] Contexts are probably not needed. Remove.
  - [ ] Check naming used for stuff. resource-def, mk-*, ...

* Implementation [1/5]
  - [ ] general [0/2]
    - [ ] proper default exceptions for all case statements
    - [ ] reflection warnings
  - [X] Resource basics [3/3]
    - [X] Attributes
    - [X] Relations
    - [X] Rendering
  - [ ] Resource validation [0/1]
    - [ ] Validators
  - [-] json [0/2]
    - [-] read
      - [ ] jsonapi wrapping support
      - [X] read attributes
      - [ ] read relationships
      - [ ] support for more types
      - [ ] support for {}/[] data
      - [ ] support for includes
    - [ ] write
  - [ ] database [0/3]
    - [ ] setup schema
    - [ ] write
    - [ ] read

* Client usage
  - Use version as id. After changing some data the client will have
    to retry GETs until a resource with higher version is available.
